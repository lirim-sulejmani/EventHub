// <auto-generated />
using System;
using Carmax.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Carmax.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230705090727_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Carmax.Domain.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id")
                        .HasComment("The unique identifier of a record. It is generated automatically by the database when the record is added.");

                    b.Property<string>("Capital")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Capital")
                        .HasComment("Capital city of the country.");

                    b.Property<string>("Continent")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Continent")
                        .HasComment("Continent where the country is.");

                    b.Property<int>("CountryCode")
                        .HasColumnType("int")
                        .HasColumnName("CountryCode")
                        .HasComment("Country code.");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("CountryName")
                        .HasComment("Name of the event.");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasDatabaseName("EventHub1");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_Country_TenantId");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("Carmax.Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id")
                        .HasComment("The unique identifier of a record. It is generated automatically by the database when the record is added.");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Address")
                        .HasComment("Address where the event is.");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("City")
                        .HasComment("City where the event is.");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CountryId")
                        .HasComment("Id of the country from Country table.");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy")
                        .HasComment("User that creates an event.");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedOn")
                        .HasComment("Date when event is created.");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime")
                        .HasColumnName("EndTime")
                        .HasComment("End time of the event.");

                    b.Property<string>("EventManager")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("EventManager")
                        .HasComment("Name of the event manager.");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("EventName")
                        .HasComment("Name of the event.");

                    b.Property<string>("EventVenue")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("EventVenue")
                        .HasComment("Venue of the event.");

                    b.Property<string>("Organizer")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Organizer")
                        .HasComment("Name of the event organizer.");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime")
                        .HasColumnName("StartTime")
                        .HasComment("Start time of the event.");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusId")
                        .HasComment("Status id of the event.");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int")
                        .HasColumnName("ZipCode")
                        .HasComment("Zip Code of the country.");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("Id")
                        .HasDatabaseName("EventHub1");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_Event_TenantId");

                    b.ToTable("Event", (string)null);
                });

            modelBuilder.Entity("Carmax.Domain.Entities.Invitation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id")
                        .HasComment("The unique identifier of a record. It is generated automatically by the database when the record is added.");

                    b.Property<bool>("BarcodeScanned")
                        .HasColumnType("bit")
                        .HasColumnName("BarcodeScanned")
                        .HasComment("This bar code is scanned when user comes in event.");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy")
                        .HasComment("User that creates an event.");

                    b.Property<DateTime?>("CreatedOn")
                        .IsRequired()
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedOn")
                        .HasComment("Date when event is created.");

                    b.Property<DateTime?>("DateScanned")
                        .HasColumnType("datetime")
                        .HasColumnName("DateScanned")
                        .HasComment("Time when QRcode is scann in event.");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Email")
                        .HasComment("Email of the guest.");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Name")
                        .HasComment("Name of the guest");

                    b.Property<string>("GeneratedCode")
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("GeneratedCode")
                        .HasComment("A random code generated.");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Institution")
                        .HasComment("Institution of work.");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Job")
                        .HasComment("User's invented job.");

                    b.Property<int?>("NoGuests")
                        .HasColumnType("int")
                        .HasColumnName("NoGuests")
                        .HasComment("Number of guests invented.");

                    b.Property<string>("NominatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("NominatedBy")
                        .HasComment("Person who has nomited to be the guest.");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PhoneNumber")
                        .HasComment("Phone number of the guest.");

                    b.Property<byte[]>("QRCode")
                        .IsRequired()
                        .HasColumnType("varbinary(MAX)")
                        .HasColumnName("QRCode")
                        .HasComment("QR code is a unique string that is generated for every guest.");

                    b.Property<string>("SendEmailError")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("SendEmailError")
                        .HasComment("This message send when an error occurs.");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusId")
                        .HasComment("Status id of the guests.");

                    b.Property<Guid?>("TemplateId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TemplateId")
                        .HasComment("this Id redirect to the template table in database.");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Vip")
                        .HasColumnType("bit")
                        .HasColumnName("Vip")
                        .HasComment("Is VIP true/false");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Website")
                        .HasComment("Website, it can be null.");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("Id")
                        .HasDatabaseName("EventHub1");

                    b.HasIndex("TemplateId");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_Invitation_TenantId");

                    b.ToTable("Invitation", (string)null);
                });

            modelBuilder.Entity("Carmax.Domain.Entities.SMTPConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id")
                        .HasComment("The unique identifier of a record. It is generated automatically by the database when the record is added.");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedOn")
                        .HasComment("Date when SMTP is create.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("Description")
                        .HasComment("A short description for smtp.");

                    b.Property<bool>("IsTLS")
                        .HasColumnType("bit")
                        .HasColumnName("IsTLS")
                        .HasComment("If is TLS will be true otherwise false.");

                    b.Property<string>("MessageFrom")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("MessageFrom")
                        .HasComment("This field shows who sends message.");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Password")
                        .HasComment("Password.");

                    b.Property<string>("SMTPAuthentication")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("SMTPAuthentication")
                        .HasComment("Authentication of SMTP.");

                    b.Property<string>("SMTPHost")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("SMTPHost")
                        .HasComment("SMTP Host.");

                    b.Property<int>("SMTPPort")
                        .HasColumnType("int")
                        .HasColumnName("SMTPPort")
                        .HasComment("SMTP Port.");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Username")
                        .HasComment("Username.");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasDatabaseName("EventHub1");

                    b.ToTable("SMTPConfigs");
                });

            modelBuilder.Entity("Carmax.Domain.Entities.Template", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id")
                        .HasComment("The unique identifier of a record. It is generated automatically by the database when the record is added.");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("Body")
                        .HasComment("Body of the email.");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy")
                        .HasComment("User that creates an event.");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedOn")
                        .HasComment("Date when event is created.");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusId")
                        .HasComment("Status of the template.");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Subject")
                        .HasComment("Subject of the email.");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("Id")
                        .HasDatabaseName("EventHub1");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_Template_TenantId");

                    b.ToTable("Template", (string)null);
                });

            modelBuilder.Entity("Carmax.Domain.Entities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id")
                        .HasComment("The unique identifier of a record. It is generated automatically by the database when the record is added.");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedOn")
                        .HasComment("Venue of the event.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Name")
                        .HasComment("Name of the event hub.");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusId")
                        .HasComment("Status of the event.");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasDatabaseName("EventHub1");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("Carmax.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id")
                        .HasComment("The unique identifier of a record. It is generated automatically by the database when the record is added.");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Address")
                        .HasComment("Status id of the guest.");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("City")
                        .HasComment("City of the user.");

                    b.Property<byte[]>("ConfirmPassword")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("ConfirmPassword")
                        .HasComment("Confirm Password of user.");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedOn")
                        .HasComment("Date when user is create.");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Email")
                        .HasComment("Email of the user.");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("FirstName")
                        .HasComment("First name of the user.");

                    b.Property<string>("ForgotPasswordToken")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("ForgotPasswordToken")
                        .HasComment("Token of forgot password.");

                    b.Property<DateTime?>("ForgotPaswordTokenExpire")
                        .HasColumnType("datetime")
                        .HasColumnName("ForgotPaswordTokenExpire")
                        .HasComment("Time when forgot password token will expire.");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("LastName")
                        .HasComment("Last name of the user.");

                    b.Property<int?>("MaxOpenBids")
                        .HasColumnType("int")
                        .HasColumnName("MaxOpenBids")
                        .HasComment("Max of open bids.");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("Password")
                        .HasComment("Password of user.");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("PhoneNumber")
                        .HasComment("Phone Number of the user.");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("RefreshToken")
                        .HasComment("Refresh Token.");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime")
                        .HasColumnName("RefreshTokenExpiryTime")
                        .HasComment("Refresh Token Expiry Time.");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleId")
                        .HasComment("Role id.");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("Salt")
                        .HasComment("Salt value.");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusId")
                        .HasComment("Status id of the user.");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TenantName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasDatabaseName("EventHub1");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_User_TenantId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Carmax.Domain.Entities.UserInvite", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id")
                        .HasComment("The unique identifier of a record. It is generated automatically by the database when the record is added.");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedOn")
                        .HasComment("Date when event is created.");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Email")
                        .HasComment("Status id of the guest.");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusId")
                        .HasComment("Status id of the guest.");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId")
                        .HasComment("Id of the guest.");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasDatabaseName("EventHub1");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_UserInvite_TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("UserInvite", (string)null);
                });

            modelBuilder.Entity("Carmax.Domain.Entities.Event", b =>
                {
                    b.HasOne("Carmax.Domain.Entities.Country", "Country")
                        .WithMany("Events")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Carmax.Domain.Entities.User", "User")
                        .WithMany("Events")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Carmax.Domain.Entities.Tenant", null)
                        .WithMany("Events")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Carmax.Domain.Entities.Invitation", b =>
                {
                    b.HasOne("Carmax.Domain.Entities.User", "User")
                        .WithMany("Invitations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Carmax.Domain.Entities.Template", "Template")
                        .WithMany("Invitations")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Carmax.Domain.Entities.Tenant", null)
                        .WithMany("Invitations")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Carmax.Domain.Entities.Template", b =>
                {
                    b.HasOne("Carmax.Domain.Entities.User", "User")
                        .WithMany("Templates")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Carmax.Domain.Entities.Tenant", null)
                        .WithMany("Templates")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Carmax.Domain.Entities.User", b =>
                {
                    b.HasOne("Carmax.Domain.Entities.Tenant", null)
                        .WithMany("Users")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Carmax.Domain.Entities.UserInvite", b =>
                {
                    b.HasOne("Carmax.Domain.Entities.Tenant", null)
                        .WithMany("UserInvite")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carmax.Domain.Entities.User", "User")
                        .WithMany("UserInvite")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Carmax.Domain.Entities.Country", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Carmax.Domain.Entities.Template", b =>
                {
                    b.Navigation("Invitations");
                });

            modelBuilder.Entity("Carmax.Domain.Entities.Tenant", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Invitations");

                    b.Navigation("Templates");

                    b.Navigation("UserInvite");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Carmax.Domain.Entities.User", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Invitations");

                    b.Navigation("Templates");

                    b.Navigation("UserInvite");
                });
#pragma warning restore 612, 618
        }
    }
}
